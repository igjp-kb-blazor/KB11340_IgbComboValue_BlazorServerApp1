@implements IAsyncDisposable

@inject PrefectureDataService PrefectureDS
@inject IJSRuntime JS

<h3>ComboComponent</h3>

<div>
    <button @onclick="OnClickAsync">コンボの値を取得する (ValueKey で指定したプロパティ値が配列で取れます)</button>
    @foreach (var item in ComboValues)
    {
        <div>@item</div>
    }
</div>

<div @ref="ComboContainerRef">
    <IgbCombo Data="PrefectureData"
              DisplayKey="@nameof(Prefecture.PrefectureName)"
              ValueKey="@nameof(Prefecture.PrefectureCode)" />
</div>

@code {
    private IJSObjectReference? JSModule;

    // 注意: IgbCombo の Data には null を設定しないでください。
    // 空集合でいいので、非 null を設定しておかないと、選択肢に "undefined" と表示されてしまいます。
    private Prefecture[] PrefectureData = Array.Empty<Prefecture>();

    private ElementReference? ComboContainerRef;
    private string[] ComboValues = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        this.PrefectureData = await PrefectureDS.GetPrefectures();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.JSModule ??= await this.JS.InvokeAsync<IJSObjectReference>("import", "./Components/ComboComponent.razor.js");
        }
    }

    private async Task OnClickAsync()
    {
        if (this.JSModule != null)
        {
            // 選択された項目の、IgbCombo の ValueKey に指定したプロパティ値が、配列で返ってきます。
            this.ComboValues = await this.JSModule.InvokeAsync<string[]>("getComboValuesScript", this.ComboContainerRef);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (JSModule is not null)
        {
            await JSModule.DisposeAsync();
        }
    }
}
